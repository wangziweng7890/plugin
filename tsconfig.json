{
  "compilerOptions": {
    /* Language and Environment */
    "target": "es2015", /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    "lib": [
      "ESNext",
      "DOM",
      "DOM.Iterable"
    ], /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    "jsx": "preserve", /* Specify what JSX code is generated. */
    "jsxImportSource": "vue",
    /* Modules */
    "module": "ESNext", /* Specify what module code is generated. */
    "moduleResolution": "node", /* Specify how TypeScript looks up a file from a given module specifier. */
    "baseUrl": ".", /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    "rootDirs": [
      "./",
      "./packages/components",
      "./packages/utils",
    ], /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
    "types": [
      "unplugin-vue-define-options/macros-global"
    ], /* Specify type package names to be included without being referenced in a source file. */
    "resolveJsonModule": true, /* Enable importing .json files. */
    /* Interop Constraints */
    "isolatedModules": true, /* Ensure that each file can be safely transpiled without relying on other imports. */
    "allowSyntheticDefaultImports": true, /* Allow 'import x from y' when a module doesn't have a default export. */
    "forceConsistentCasingInFileNames": true, /* Ensure that casing is correct in imports. */
    /* Type Checking */
    "strict": true, /* Enable all strict type-checking options. */
    "noImplicitAny": true, /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    "strictNullChecks": true, /* When type checking, take into account 'null' and 'undefined'. */
    "strictFunctionTypes": true, /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    "noImplicitThis": true, /* Enable error reporting when 'this' is given the type 'any'. */
    "noUnusedLocals": true, /* Enable error reporting when local variables aren't read. */
    "noUnusedParameters": true, /* Raise an error when a function parameter isn't read. */
    "noImplicitReturns": true, /* Enable error reporting for codepaths that do not explicitly return in a function. */
    "skipLibCheck": true /* Skip type checking all .d.ts files. */
  },
  // "include": [
  //   "packages",
  //   "typings/components.d.ts",
  //   "typings/env.d.ts"
  // ],
  "exclude": [
    "node_modules",
    "**/dist",
    "**/__tests__/**/*",
    "**/gulpfile.ts",
    "**/test-helper",
    "packages/test-utils",
    "**/*.md"
  ]
}
